import boardMockData from '../../mocks/board.js';

const lists = boardMockData.lists;
const numberOfLists = lists.length;

// Code Structure below of the test generated by chatgpt and seems enough so it was modified to fit the exact mock data information and to use the custom command
describe('Project Management Board E2e', () => {
	beforeEach(() => {
		// Visit the application before each test
		cy.visit('/');
	});

	it('should display the board with lists and cards', () => {
		// Check for board title
		cy.get('h1').contains('Project Management Board').should('be.visible');

		// Verify all lists and cards
		cy.getByCy('list.container').should('have.length', numberOfLists);

		cy.getByCy('list.container').each((list, index) => {
			const listTitle = lists[index].name;
			const listCards = lists[index].cards;

			// Verify the list title
			cy.wrap(list)
				.find('[data-cy="list.title"]')
				.should('be.visible')
				.contains(listTitle, { matchCase: false });

			// Verify cards count
			cy.wrap(list)
				.find('[data-cy="card.container"]')
				.should('have.length', listCards.length);

			// Verify card titles
			cy.wrap(list)
				.find('[data-cy="card.title"]')
				.each((card, cardIndex) => {
					cy.wrap(card)
						.should('be.visible')
						.contains(listCards[cardIndex].title, { matchCase: false });
				});
		});
	});

	it('should allow adding a new card to a list', () => {
		const newCardTitle = 'New Test Card';
		const listIndex = 0; // Add card to the first list

		// Click on "Add a Card" button in the first list
		cy.getByCy('list.container')
			.eq(listIndex)
			.within(() => {
				cy.getByCy('list.initiateCreateCardButton').click();
			});

		// Verify an editable text area appears for entering the card title
		cy.getByCy('list.container')
			.eq(listIndex)
			.find('[data-cy="card.title.editable"]')
			.should('be.visible')
			.type(newCardTitle);

		// Click on the "Add Card" button
		cy.getByCy('list.container')
			.eq(listIndex)
			.find('[data-cy="list.createCardButton"]')
			.click();

		// Verify that the new card appears in the list
		cy.getByCy('list.container')
			.eq(listIndex)
			.find('[data-cy="card.container"]')
			.should('have.length', lists[listIndex].cards.length + 1 + 1); // +1 for the last created card and the last + 1 for the last card for continues creation

		// Verify the new card's title
		cy.getByCy('list.container')
			.eq(listIndex)
			.find('[data-cy="card.title"]')
			.last()
			.should('be.visible')
			.contains(newCardTitle);
	});

	it('should not allow adding an empty card', () => {
		const listIndex = 1; // Second list

		// Click on "Add a Card" button in the second list
		cy.getByCy('list.container')
			.eq(listIndex)
			.within(() => {
				cy.getByCy('list.initiateCreateCardButton').click();
			});

		// Leave the input field empty and click "Add Card"
		cy.getByCy('list.container')
			.eq(listIndex)
			.find('[data-cy="list.createCardButton"]')
			.click();

		// Verify that no new card was added
		cy.getByCy('list.container')
			.eq(listIndex)
			.find('[data-cy="card.container"]')
			.should('have.length', lists[listIndex].cards.length + 1); //  last + 1 for the last card for continues creation
	});

	it('should allow canceling card creation', () => {
		const listIndex = 0; // First list

		// Click on "Add a Card" button in the first list
		cy.getByCy('list.container')
			.eq(listIndex)
			.within(() => {
				cy.getByCy('list.initiateCreateCardButton').click();
			});

		// Verify an editable text area appears
		cy.getByCy('list.container')
			.eq(listIndex)
			.find('[data-cy="card.title.editable"]')
			.should('be.visible');

		// Click the close button to cancel card creation
		cy.getByCy('list.container')
			.eq(listIndex)
			.find('[data-cy="list.closeCreateCardButton"]')
			.click();

		// Verify the input field is closed and no new card was added
		cy.getByCy('list.container')
			.eq(listIndex)
			.find('[data-cy="card.title.editable"]')
			.should('not.exist');
	});
});
